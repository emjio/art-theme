[{"slug":"Top 10 furniture design trends for 2022","category":"blog","title":"Top 10 furniture design trends for 2022","body":"\nMolestias laudantium dolorem impedit quam eaque suscipit voluptatem vel. Sit et sit autem quae dicta repellat magnam. Iste corporis nihil enim nobis. Ea omnis qui illo ratione. Et eius est mollitia.\n\nId dicta cumque saepe enim reprehenderit quidem quis mollitia sit. Aspernatur quia doloribus ipsa. Soluta quis necessitatibus eaque dolorem sunt voluptates neque. Sit cumque dolor distinctio. Fugiat nostrum consequatur.\n\nCum vitae explicabo aspernatur rerum. Tenetur possimus quos eveniet. Repellat eveniet repellat maiores magnam voluptas dolor. Mollitia possimus laborum unde eius sunt. Repellat eos possimus nulla cum accusamus numquam labore dolore.\n\nMolestias laudantium dolorem impedit quam eaque suscipit voluptatem vel. Sit et sit autem quae dicta repellat magnam. Iste corporis nihil enim nobis. Ea omnis qui illo ratione. Et eius est mollitia.\n\nId dicta cumque saepe enim reprehenderit quidem quis mollitia sit. Aspernatur quia doloribus ipsa. Soluta quis necessitatibus eaque dolorem sunt voluptates neque. Sit cumque dolor distinctio. Fugiat nostrum consequatur.\n\nCum vitae explicabo aspernatur rerum. Tenetur possimus quos eveniet. Repellat eveniet repellat maiores magnam voluptas dolor. Mollitia possimus laborum unde eius sunt. Repellat eos possimus nulla cum accusamus numquam labore dolore.\n\nMolestias laudantium dolorem impedit quam eaque suscipit voluptatem vel. Sit et sit autem quae dicta repellat magnam. Iste corporis nihil enim nobis. Ea omnis qui illo ratione. Et eius est mollitia.\n\nId dicta cumque saepe enim reprehenderit quidem quis mollitia sit. Aspernatur quia doloribus ipsa. Soluta quis necessitatibus eaque dolorem sunt voluptates neque. Sit cumque dolor distinctio. Fugiat nostrum consequatur.\n\nCum vitae explicabo aspernatur rerum. Tenetur possimus quos eveniet. Repellat eveniet repellat maiores magnam voluptas dolor. Mollitia possimus laborum unde eius sunt. Repellat eos possimus nulla cum accusamus numquam labore dolore."},{"slug":"front-end development","category":"blog","title":"font-end dev","body":"## 终端[#](https://pakchoi.xlog.app/front-end-development#%E7%BB%88%E7%AB%AF)\n\n### 常用命令[#](https://pakchoi.xlog.app/front-end-development#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4)\n\n* ssh\n* scp\n* bat\n* ack\n* **[the\\_silver\\_searcher](https://github.com/ggreer/the_silver_searcher)**\n\n### [命令行快捷键](https://blog.ssdnodes.com/blog/cheatsheet-bash-shortcuts/)[#](https://pakchoi.xlog.app/front-end-development#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E6%8D%B7%E9%94%AE)\n\n* `Ctrl + a` 光标移动到开头\n* `Ctrl + e` 光标移动到结尾\n* `Ctrl + u` 删除命令\n* `Ctrl + k` 删除当前光标之后所有的字符\n* `Ctrl + w` 向前删除一个单词\n\n## [Vim](https://www.notion.so/Vim101-fcb9f42028ee4b6c880e83315621671a)[#](https://pakchoi.xlog.app/front-end-development#vim)\n\n* 三种模式\n* 基本操作：移动、删除、复制\n* 编辑器\n\n## 语言服务协议[#](https://pakchoi.xlog.app/front-end-development#%E8%AF%AD%E8%A8%80%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE)\n\n> The goal of the protocol is to allow programming language support to be implemented and distributed independently of any given editor or IDE.\n\n> ​**语言服务器协议**​（Language Server Protocol，LSP）是一个开放的、基于[JSON-RPC](https://zh.m.wikipedia.org/wiki/JSON-RPC)的[网络传输协议](https://zh.m.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE)，[源代码编辑器](https://zh.m.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8)或[集成开发环境](https://zh.m.wikipedia.org/wiki/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83)（IDE）与提供特定编程语言特性的[服务器](https://zh.m.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8)之间交互时会用到这个协议。**该协议的目标是让编辑器或集成开发环境能支持更多的编程语言**\n\n![image](https://ipfs.crossbell.io/ipfs/bafkreicv2tsaqxlislabephyutxozcvqpuuesfwyaapxvitlruqjqmjbq4?img-quality=75&img-format=auto&img-onerror=redirect&img-width=3840)\n\n**特点**\n\n* 转到定义 （go to definition）\n* 查找所有引用 （find all references）\n* hover\n* completion\n* rename\n* format\n* refactor\n* highlight\n* updateImportOnFileMove\n* autoImport\n\n![image](https://ipfs.crossbell.io/ipfs/bafkreicf4omb5a4fzcrwjfnw2o6ezdqxar2u5lmvwvc3olhtdevx34cm34?img-quality=75&img-format=auto&img-onerror=redirect&img-width=3840)\n\n* 用户打开 **一** (工具中称为) 文档 \"的文件：该工具通知语言服务器文档已打开 (\"textDocument/didOpen\") 。 从现在开始，文档内容的事实不再在文件系统上，而是由工具保留在内存中。\n* 用户 **进行** 编辑：该工具会通知服务器文档更改 ('textDocument/didChange') 并且语言服务器会更新程序的语义信息。 发生这种情况时，语言服务器会分析此信息，并通知工具检测到的错误和警告 ( textDocument/publishDiagnostics ) 。\n* 用户对编辑器中的符号执行 \"转到定义\"：该工具发送具有两个参数的 \"textDocument/definition\" 请求： (1) 文档 URI 和 (2) 从启动 \"转到定义\" 请求到服务器的文本位置。 服务器使用文档 URI 和符号定义在文档内的位置进行响应。\n* 用户关闭文档 (文件 **) ：** 从工具发送 \"textDocument/didClose\" 通知，通知语言服务器文档现在不再在内存中，并且文件系统上的当前内容现在是最新的。\n* JSON-RPC 传输协议\n  The client in that case is typically software intending to ​**call a single method of a remote system**​. Multiple input parameters can be passed to the remote method as an array or object, whereas the method itself can return multiple output data as well.\n  request\n  \n  * method - `String`\n  * params - `Object` or `Array`\n  * id\n  \n  reponse\n  \n  * result\n  * error\n  * id\n\n详细了解一下 “textDocument/definition” 请求，下面是 C++ 文档中 “转到定义” 请求的客户端工具和语言服务器之间的有效负载。\n\n这是请求：\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\" : 1,\n    \"method\": \"textDocument/definition\",\n    \"params\": {\n        \"textDocument\": {\n            \"uri\": \"file:///p%3A/mseng/VSCode/Playgrounds/cpp/use.cpp\"\n        },\n        \"position\": {\n            \"line\": 3,\n            \"character\": 12\n        }\n    }\n}\n```\n\n响应为：\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"result\": {\n        \"uri\": \"file:///p%3A/mseng/VSCode/Playgrounds/cpp/provide.cpp\",\n        \"range\": {\n            \"start\": {\n                \"line\": 0,\n                \"character\": 4\n            },\n            \"end\": {\n                \"line\": 0,\n                \"character\": 11\n            }\n        }\n    }\n}\n```\n\n当用户使用不同的语言时，VS Code 通常启动每个编程语言的语言服务器。\n\n![image](https://ipfs.crossbell.io/ipfs/bafkreic6tap7imgvnneqffa3ujbbrurwc5vcrzrnd6qquzhyqwrwoq2nwm?img-quality=75&img-format=auto&img-onerror=redirect&img-width=1920)\n\n在 VS Code 编辑器中语言服务是一种特殊的扩展，这些扩展可以使编辑器支持多种编程语言。\n\n编辑器内置了很多语言服务器，比如 Typescript/JavaScript、html、css，其他也更多可以通过扩展的形式安装，比如 vetur。\n\n## VS Code[#](https://pakchoi.xlog.app/front-end-development#vs-code)\n\n### VS Code 扩展[#](https://pakchoi.xlog.app/front-end-development#vs-code-%E6%89%A9%E5%B1%95)\n\n* [VueDX](https://marketplace.visualstudio.com/items?itemName=znck.vue-language-features)\n  * Definition\n    * Goto component definition\n    * Goto prop definition\n    * Goto expression definition\n  * Renaming\n    * Rename prop\n    * Rename data\n    * Rename computed\n    * Rename method\n    * Rename variables/function in setUp()\n    * Rename component or Vue file\n* [File Utils](https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils)\n  * New File\n  * New Folder\n  * Delete file\n  * Duplicate\n  * Rename\n  * Copy Name\n  * Move\n* [advanced-new-file](https://marketplace.visualstudio.com/items?itemName=patbenatar.advanced-new-file)\n* [Auto Rename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag)\n* [Color the tag name](https://marketplace.visualstudio.com/items?itemName=jzmstrjp.color-the-tag-name)\n* [Live Preview](https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server)\n* [Tailwind CSS intelliSense](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss)\n* [Volar](https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar)\n\n[VS Code 快捷键](https://www.notion.so/vscode-91914705bcbd4087992a6276bb95bf26)\n\n## Chrome 浏览器[#](https://pakchoi.xlog.app/front-end-development#chrome-%E6%B5%8F%E8%A7%88%E5%99%A8)\n\n### [CSS Debug](https://www.notion.so/CSS-debugging-5cfe0c5728d0407aa1f65a8771542075)[#](https://pakchoi.xlog.app/front-end-development#css-debug)\n\n![image](https://ipfs.crossbell.io/ipfs/bafkreidzmqmmo6nxmfxfyo6c2jpqjanbx2hnnjt2xtuyhoio7mktkh23ta?img-quality=75&img-format=auto&img-onerror=redirect&img-width=1920)\n\n* 使用按键增大和减小属性值大小\n  * `shift` + up/down: ±10\n  * `Command`(mac)/`Ctrl` (window)+ up/down: ±100\n  * `Alt`(window)/`option` (mac)+ up/down: ±0.1\n* 捕获节点截图 （Capture node screenshot）\n* 增加、编辑和删除 CSS 类。\n  * `.cls`\n  * `enter` 键\n* `h` 键快速隐藏元素\n\n### Chrome 扩展[#](https://pakchoi.xlog.app/front-end-development#chrome-%E6%89%A9%E5%B1%95)\n\n* [OneTab](https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall) - 所有标签页转换成一个列表\n* [The Great Suspender](https://chrome.google.com/webstore/detail/the-great-suspender-origi/ahmkjjgdligadogjedmnogbpbcpofeeo) 冻结长时间不用的网页，释放系统资源。\n* [JSON Viewer](https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh)\n* [Site Palette](https://chrome.google.com/webstore/detail/site-palette/pekhihjiehdafocefoimckjpbkegknoh)\n* [wappalyzer](https://www.wappalyzer.com/)\n* [Vimium](http://vimium.github.io/)\n\n## 辅助工具[#](https://pakchoi.xlog.app/front-end-development#%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7)\n\n* [vscodedev](https://vscode.dev/) - 在线 vscode 编辑器\n* [regex](https://regex101.com/) - 在线调试正则表达式\n\n## 参考[#](https://pakchoi.xlog.app/front-end-development#%E5%8F%82%E8%80%83)\n\n* [https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way](https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way)\n* [Language Extensions Overview](https://code.visualstudio.com/api/language-extensions/overview)\n* [Language Server Extension Guide](https://code.visualstudio.com/api/language-extensions/language-server-extension-guide)\n* [语言服务器协议](https://docs.microsoft.com/zh-cn/visualstudio/extensibility/language-server-protocol?view=vs-2022)\n* [Official page for Language Server Protocol - Microsoft Open](https://microsoft.github.io/language-server-protocol/)\n* [neovim LSP configs](https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md)\n"},{"slug":"linux","category":"blog","title":"linux服务器维护","body":"# linux服务器维护\n\n## [Before everything](https://blog-emjio.vercel.app/linux#before-everything)\n\nlinux 是一个非常优秀的系统。网上教程非常的多。那些到今天还没用过linux系统的人最想知道的其实并不是如何使用Linux系统。而是我为什么要用Linux系统。\n\n> 问题一：Linux 对用户友好吗？ 回答：“Linux is user-friendly. It’s just very selective about who its friends are.” 这句话没有出处，主语本来是 Unix，但 Linux 是 Unix 的一种 (吗)，所以它对 Linux 也成立 (吧)。很多人把这句话当作笑话，但对照一下 Linux 对用户所做的假设，我们会发现这句话严肃至极，一点都不好笑。Linux 对用户很友好，但它对自己的用户是有假定的。如果你感觉不到他的友好，那说明你不满足假定。 问题二：听你一说，Linux 好像很高大上的感觉。如果我弃 Windows 从 Linux，用不了多久就会升职加薪当上总经理出任 CEO 迎娶白富美走向人生巅峰吧？想想还有点小激动呢！ 回答：我不知道你是从哪里听出 Linux 高大上的。至于你的问题嘛，我还是再讲个故事吧： 一个女生要从三个追求者中选择一个作为自己的白马王子。三人通过重重考验，来到最后一关。女生要求他们亮出自己的笔记本电脑，结果发现第一个追求者用的是 Windows，第二个用的是 Linux，而剩下那个用的当然是 Mac 了。最后她选了胸大，哦不，最有钱的那一个。 对了，你不会天真到以为用 Mac 的就一定有钱吧？ 问题三：上面那个故事里的女生到底应该选哪个？ 回答：如果你对故事里给出的答案不满意，这个问题就难了。不过，如果这个女生想做女王大人，断不可选择第二个追求者。否则，根据毕马隆效应，白马王子可能会因抑郁而自尽。 问题四：到底 Windows 和 Linux 哪个好？我该用哪一个？ 回答：Linux 和 Windows 哪个好？这个问题就跟纠缠豆腐脑该加糖还是加盐一样没有意义。操作系统只是一个工具，适合你的就是最好的。Linux 传教士们，省省吧！“自由即责任，世人多畏之。” 不论到什么时候，Linux 用户都将是相对少数，这是人性决定的。如果真的理解 Linux 的哲学，那你应该明白，每一个人都可以问 “我该用哪个”，但任何人都不应管 “她/他该用哪个”。Windows 支持者们，不要再说 “Linux 我试过，太难用，跟 Windows 差距太大”。这很可能是你的真实感受，但明智的做法是装作从来没试过，不要宣扬。原因很简单：“若无力驾驭，自由便是负担。”\n\n1. 用户自主。用户决定系统如何工作，而不是反之。任何提示用户 “正在安装更新，请不要关机” 的行为都跟不以结婚为目的的恋爱是一个性质。用户是机器的主人，操作系统只是用户请来的助手；用户知道自己想要什么，明白自己在做什么，也会为自己的行为负责；操作系统尽量少说话，更不要下命令。用户自主还蕴含系统的可定制性：用户可以对系统做任何配置或改造。\n2. 用户知情。如有必要，用户可以获知系统工作的任何细节，而不是仅仅被告知 “[正在处理一些事情](https://www.zhangzk.net/figs/windows.jpg)” —— 这比不以结婚为目的的恋爱还让人无法接受。\n3. 系统高效。在此系统下用户可以很方便地获得各种工具，并且不同工具能很容易地组装在一起完成复杂的工作。机器更多是用来干活的，所以这一点很重要。\n\n## [Linux 是一个基于文件的操作系统。文件是其核心。](https://blog-emjio.vercel.app/linux#linux-%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E6%96%87%E4%BB%B6%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E6%98%AF%E5%85%B6%E6%A0%B8%E5%BF%83)\n\n在linux中除了root 以外。每个用户只能操作自己有权限的文件和文件夹。\n\n在任意目录中执行\n\n<pre class=\"shiki material-default\" bash=\"true\"><div class=\"code-container\"><code><div class=\"line\"><span>ll  </span></div><div class=\"line\"><span>#小写的L 不是1</span></div></code></div></pre>\n\n![linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BB%B4%E6%8A%A4%20015280fb41d34a8a99a2a95578b483c0/Untitled.png](https://blog-emjio.vercel.app/linux/11.png)\n\n从左到右依次为\n\n权限控制 包含的文件数目 所属用户 所属用户组 字节数 修改的月 日 时间 文件名称\n\n其中权限控制由十位组成\n\n第一个字母表示文件类型,\n\n”-”,普通文件.\n\n”d”目录,字母”d”,是dirtectory(目录)的缩写.\n\n“l”符号链接。请注意,一个目录或者说一个文件夹是一个特殊文件,这个特殊文件存放的是其他文件和文件夹的相关信息.\n\n“b”块设备文件。\n\n“c”字符设备文件。\n\n紧接着的3\\*3个字符分3组，各指示此文件的读、写、执行权限 ，对于owner、group、others而言。\n\n二进制表示法\n\nr = read 对应 4 100 = 4\n\nw= write 对应 2 010 = 2\n\nx = execute 对应 001 = 1\n\n我们通常说的755\n\n755: （111）（ 101）（ 101） = (7) (5)  (5)\n\n第一个7:表示当前文件的拥有者的权限,7=4+2+1 可读可写可执行权限\n\n第二个5:表示当前文件的所属组（同组用户）权限,5=4+1 可读可执行权限\n\n第三个5:表示当前文件的组外权限,5=4+1 可读可执行权限\n\n衍生命令\n\nchmod 修改文件权限\n\nchgrp 修改文件组\n\nchown 修改文件所有者\n\neg:\n\n<pre class=\"shiki material-default\" bash=\"true\"><div class=\"code-container\"><code><div class=\"line\"><span>chmod 755 test.txt  修改text.txt 文件夹的名称</span></div><div class=\"line\"><span>chmod 777 -R  /dist 递归修改dist 文件夹下面的全部文件为777</span></div><div class=\"line\"><span>chgrp www  dist 修改dist 目录的所有组为 www</span></div><div class=\"line\"><span>chown www dist  修改dist 目录的所有者为 www</span></div></code></div></pre>\n\n## [Linux 的目录结构](https://blog-emjio.vercel.app/linux#linux-%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84)\n\n![/linux/1.png](https://blog-emjio.vercel.app/linux/1.png)\n\n* ​**/bin**​：bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。\n* **​/boot：​**这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。\n* **​/dev ：​**dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。\n* **​/etc：​**etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。\n* ​**/home**​：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。\n* ​**/lib**​：lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。\n* ​**/lost+found**​：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。\n* ​**/media**​：linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。\n* ​**/mnt**​：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。\n* ​**/opt**​：opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。\n* ​**/proc**​：proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。\n\n## [Linux 的程序安装](https://blog-emjio.vercel.app/linux#linux-%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%AE%89%E8%A3%85)\n\nLinux 下面公有的\n\nrpm 安装\n\nrpm –ivh rpm的软件包名\n\ncentos 中 常用yum install 包名称\n\nubuntu 用 apt-get install 包名称\n\n下载源文件解压\n\nmake 编译\n\nmake install 安装\n\n## [Linux 下的服务管理](https://blog-emjio.vercel.app/linux#linux-%E4%B8%8B%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86)\n\nLinux 服务管理两种方式service和systemctl\n\n在/etc/init.d/目录下面可以看到已经注册的服务\n\n![/linux/2.png](https://blog-emjio.vercel.app/linux/2.png)\n\n启动nginx\n\n<pre class=\"shiki material-default\" bash=\"true\"><div class=\"code-container\"><code><div class=\"line\"><span>#启动nginx</span></div><div class=\"line\"><span>service nginx start</span></div><div class=\"line\"><span>#或者 </span></div><div class=\"line\"><span>systemctl start nginx</span></div></code></div></pre>\n\n查看nginx 的状态\n\n<pre class=\"shiki material-default\" bash=\"true\"><div class=\"code-container\"><code><div class=\"line\"><span>service nginx status</span></div><div class=\"line\"><span>systemctl status nginx</span></div></code></div></pre>\n\n![/linux/3.png](https://blog-emjio.vercel.app/linux/3.png)\n\n## [Linux 常用命令](https://blog-emjio.vercel.app/linux#linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4)\n\n1、文件常用操作\n\n<pre class=\"shiki material-default\" bash=\"true\"><div class=\"code-container\"><code><div class=\"line\"><span>mv  filename newdir  </span><span># 移动文件到某个目录 mv 是move  file 的缩写</span></div><div class=\"line\"><span>cat filename    </span><span># 输出文件的内容</span></div><div class=\"line\"><span>cp filename newfilename  </span><span># 复制某个文件  cp 是copy 的缩写</span></div><div class=\"line\"><span>rm filename/dir   </span><span># 删除某个文件或者目录。 rm 是 remove的缩写  删除目录需要参数 -r 递归。 -f 是强制。 比如 rm -rf /* </span></div><div class=\"line\"><span>mkdir dirname </span><span># 创建目录 是make directory 的缩写。</span></div><div class=\"line\"><span>touch filename </span><span>#修改目录或者文件（的修改时间）。 不存在的时候会创建</span></div><div class=\"line\"><span>vi filename </span><span>#用vi 编辑器打开filename </span></div><div class=\"line\"><span>awk </span><span># 文本文件处理语言。</span></div><div class=\"line\"><span>|</span><span> </span><span># 管道符 连续调用命令的时候 使用管道符。 前面的执行结果会作为后面的执行参数。 </span></div><div class=\"line\"><span>&gt;</span><span> </span><span># 写入文件符号   会创建新文件</span></div><div class=\"line\"><span>&gt;&gt;</span><span>  </span><span># 将内容追加进入文件。        </span></div><div class=\"line\"><span>grep </span><span># 查找符合条件的字符串</span></div><div class=\"line\"><span>ps </span></div><div class=\"line\"><span>echo</span><span>  </span><span># 输出某个字符串</span></div><div class=\"line\"><span>netstat </span><span># 查看网络连接 </span></div><div class=\"line\"><span>kill</span><span>  pid </span><span># 杀死某个进程</span></div></code></div></pre>\n\n2、进阶用法\n\n<pre class=\"shiki material-default\" bash=\"true\"><div class=\"code-container\"><code><div class=\"line\"><span>ps -A </span><span>|</span><span> grep nginx  </span><span>#查看nginx 的进程id</span></div><div class=\"line\"><span>netstat -ap </span><span>|</span><span> grep ssh  </span><span>#查看ssh 运行的端口</span></div><div class=\"line\"><span>netstat -tunlp</span><span>|</span><span> grep 8010 </span><span># 查看8010 端口被什么程序占用</span></div><div class=\"line\"><span>echo</span><span> 123 </span><span>&gt;</span><span> test.log </span><span># 将123 写入 test.log</span></div><div class=\"line\"><span>cat test.pub </span><span>&gt;&gt;</span><span> authorized_keys </span><span># 读取test.pub 并且将其内容加入 authorized_keys </span></div></code></div></pre>\n\n假设已经熟悉如何去熟练的使用一台linux 服务器了。请实现如下操作。\n\nQ: 如何查看 某个文件 并将里面包含1的内容写入 test.log 文件。\n\nQ: 写一行命令 使得其执行之后有一半的几率输出 lucky ，一半的几率 递归删除根目录。\n\n### [从零开始配置一个服务器环境。](https://blog-emjio.vercel.app/linux#%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83)\n\n当我们拿到一套linux 服务器的时候通常需要安装需要的软件包。\n\n我们不确定是否已经安装某个程序那我们可以使用\n\n> whereis 程序名称。\n\n![/linux/4.png](https://blog-emjio.vercel.app/linux/4.png)\n\n![/linux/5.png](https://blog-emjio.vercel.app/linux/5.png)\n\n在centos 下我们使用yum 安装 输入 yum install nginx 即可 遇到提示一直y 即可\n\n有时候会遇到yum 找不到情况 这时候可以考虑换源 或者 使用rpm 下载\n\n下载完成 运行 systemctl nginx start 进行启动\n\n这时候可以去访问这台服务器的80端口了\n\n一般程序的配置文件都会在/etc 目录\n\nnginx 的配置文件默认就在 /etc/nginx目录下面\n\n通常nginx 的目录结构如下图所示\n\n![/linux/6.png](https://blog-emjio.vercel.app/linux/6.png)\n\nnginx.conf 放置的是入口配置文件\n\n可以使用cat 命令查看里面的内容\n\n里面有nginx 的基础可以运行的配置。\n\n其中倒数第二行的意思是 会将 /etc/nginx/conf.d 下面的 任意以.conf 结尾的文件加载进来。\n\n所以不同网站只需要 创建不同的配置文件即可\n\n![/linux/7.png](https://blog-emjio.vercel.app/linux/7.png)\n\n如下图 为不同的 网站配置了不同的 配置文件\n\n![/linux/8.png](https://blog-emjio.vercel.app/linux/8.png)\n\n假设我们想新加入一个网站\n\n我们可以拷贝一份\n\n<pre class=\"shiki material-default\" bash=\"true\"><div class=\"code-container\"><code><div class=\"line\"><span>cp defult.conf default8.conf </span><span># copy defult.conf 创建新文件 并重命名为 defult8.conf</span></div></code></div></pre>\n\n![/linux/9.png](https://blog-emjio.vercel.app/linux/9.png)\n\n然后根据自己网站的需求进行配置修改\n\n<pre class=\"shiki material-default\" bash=\"true\"><div class=\"code-container\"><code><div class=\"line\"><span>vim default8.conf</span></div></code></div></pre>\n\n![/linux/10.png](https://blog-emjio.vercel.app/linux/10.png)\n\n修改完成 按ESC 输入英文冒号 wq 退出 （w= write q = quit ）写入并退出\n\n最后执行\n\n<pre class=\"shiki material-default\" bash=\"true\"><div class=\"code-container\"><code><div class=\"line\"><span>#进行配置重载</span></div><div class=\"line\"><span>systemctl nginx reload</span></div></code></div></pre>\n\n## [常见问题与排除](https://blog-emjio.vercel.app/linux#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E6%8E%92%E9%99%A4)\n\nQ：nginx 新增了一个网站但起不来是为什么？\n\nA: 使用systemctl 查看 nginx 的运行状态查看是否down掉。如果正常再用netstat 查看端口是否已经被占用。此时如果已经被占用 那可能是防火墙端口没有开放。如果是线上则可能是安全组没开放。如果端口没有被占用 那先看日志。 nginx 通常日志在/var/log/nginx 下面先看日志 根据日志情况在做判断。\n"},{"slug":"wsl","category":"blog","title":"wsl 使用介绍","body":"\n\n## [WSL是什么？](https://blog-emjio.vercel.app/wsl#wsl%E6%98%AF%E4%BB%80%E4%B9%88)\n\nWSL是微软出品的 运行在Windows子系统。全称`Windows Subsystem for Linux`\n\n到现在已经到了第二个版本\n\n> WSL 2 是适用于 Linux 的 Windows 子系统体系结构的一个新版本，它支持适用于 Linux 的 Windows 子系统在 Windows 上运行 ELF64 Linux 二进制文件。 它的主要目标是​**提高文件系统性能**​，以及添加​**完全的系统调用兼容性**​。\n\n在WSL中你将获得一套完整的Linux环境（继承自Window）和对Window程序的调用能力。\n\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/48k317kOxqg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n## [为什么不直接用虚拟机？](https://blog-emjio.vercel.app/wsl#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%9B%B4%E6%8E%A5%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA)\n\n与虚拟机不同。他是一个运行在Window 环境下由微软的某种桥接技术进行连接的系统运行方式。对于Window 而言，Linux 是其子系统。对于Linux ，Windows 是挂载在他上面的几个目录。得益于这种酷炫的连接方式。我们可以非常方便的在两个系统中进行双向操作。\n\n## [前置知识](https://blog-emjio.vercel.app/wsl#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86)\n\n* 基本的Linux 命令认知（快速入门linux可以参考另一篇文章）\n\n[linux服务器维护](https://blog-emjio.vercel.app/linux/)\n\n* 不愿意就此打住的脑子\n* 持续改进的心\n\n## [使用他能带来什么好处？](https://blog-emjio.vercel.app/wsl#%E4%BD%BF%E7%94%A8%E4%BB%96%E8%83%BD%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84)\n\n* Linux 天然的开发亲和力\n* 方便快捷的各类程序安装\n* 高效率的文件执行/IO密集任务性能提升明显\n* 高度自定义化的Shell集成\n* 沉浸式的开发体验\n* 无限的可能性\n\n## [如何使用一个WSL环境？](https://blog-emjio.vercel.app/wsl#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AAwsl%E7%8E%AF%E5%A2%83)\n\n### [安装WSL](https://blog-emjio.vercel.app/wsl#%E5%AE%89%E8%A3%85wsl)\n\n安装过程见微软官方文档 只需要几次命令输入即可快速拥有\\`\n\n[安装 WSL](https://docs.microsoft.com/zh-cn/windows/wsl/install)\n\n我们在内部使用的时候也发现了一些在安装上的问题\n\n当然绝大部分问题可以直接访问WSL的github 仓库\n\n[https://github.com/microsoft/WSL](https://github.com/microsoft/WSL)\n\n### [配置你的环境](https://blog-emjio.vercel.app/wsl#%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84%E7%8E%AF%E5%A2%83)\n\n安装和基础的终端配置可见此处。目前最好的wsl入门中文文档\n\n[Dev on Windows with WSL](https://dowww.spencerwoo.com/)\n\n安装世界上最酷的shell环境`oh-my-zsh`\n\n(如果不会科学上网可以找gitee上的镜像)\n\n然后安装一切你喜欢的插件\n\n这里是一个列举了zsh知名插件的仓库地址\n\n[https://github.com/unixorn/awesome-zsh-plugins.git](https://github.com/unixorn/awesome-zsh-plugins.git)\n\n## [真实wsl 开发使用演示](https://blog-emjio.vercel.app/wsl#%E7%9C%9F%E5%AE%9Ewsl-%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8%E6%BC%94%E7%A4%BA)\n\n首先贴出一份我自己的个人配置作为参考\n\n[https://github.com/emjio/oh-my-zsh-backup](https://github.com/emjio/oh-my-zsh-backup)\n\n### [在vscode 中集成wsl 开发](https://blog-emjio.vercel.app/wsl#%E5%9C%A8vscode-%E4%B8%AD%E9%9B%86%E6%88%90wsl-%E5%BC%80%E5%8F%91)\n\n你只需要把你的项目代码放在你的wsl 的文件夹里面\n\nwsl 中 进入目录\n\n<pre class=\"shiki material-default\" bash=\"true\"><div class=\"code-container\"><code><div class=\"line\"><span>code </span><span>.</span></div></code></div></pre>\n\n![Untitled](https://blog-emjio.vercel.app/wsl/0.png)\n\n只在`linux`中被支持的 npm 包 `n`\n\n可以支持快速多个版本的NodeJs的安装和切换\n\n![Untitled](https://blog-emjio.vercel.app/wsl/1.png)\n\n使用`tmux` 在一个终端中进行拆分和任务切换\n\n![Untitled](https://blog-emjio.vercel.app/wsl/2.png)\n\n能够根据格式读取文件并且进行语法高亮的`batcat`\n\n![Untitled](https://blog-emjio.vercel.app/wsl/3.png)\n\n能够帮你进行命令正确提示和历史命令输入建议的 `zsh-syntax-highlighting` 和 `zsh-autosuggestions`\n\n![Untitled](https://blog-emjio.vercel.app/wsl/4.png)\n\n错误命令为红色\n\n![Untitled](https://blog-emjio.vercel.app/wsl/5.png)\n\n正确命令为绿色并且如果输入的这部分是历史输入过的会进行提示\n\n这对于前端经常输入 yarn 或者`yarn serve` 非常省事情 你只要打个y 就能提示出来了\n\n一个非常沙雕的工具 “thefuck\\`\\`\\` 会根具你上次输入错误的命令提示你正确的\n\n![Untitled](https://blog-emjio.vercel.app/wsl/6.png)\n\n最后就是各种提升效率的alias\n\n![Untitled](https://blog-emjio.vercel.app/wsl/7.png)\n\n上面分别是\n\n* 快速在文件浏览器打开当前路径\n* 快速复制当前路径到粘贴板\n* 快速打开google 搜索某个关键词\n* 快速大概github 搜索某个关键词\n\n所以你就知道了wsl 可以快速的调用windows 下面的任何程序，并根据他提供的参数进行快速的启动。\n"}]